#pragma once

namespace memory
{
	// this struct will get called whenever a handle needs to be closed.
	struct close_handle {
		using pointer = HANDLE;
		void operator()(HANDLE handle)
		{
			if (handle)
				CloseHandle(handle);
		}
	};

	bool get_process_id(const std::string_view process_name) {
		PROCESSENTRY32 processentry;

		const std::unique_ptr<HANDLE, close_handle>
			snapshot_handle(CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0));

		if (snapshot_handle.get() == INVALID_HANDLE_VALUE)
			return false;

		processentry.dwSize = sizeof(PROCESSENTRY32);

		while (Process32Next(snapshot_handle.get(), &processentry) == TRUE) {
			if (process_name.compare(processentry.szExeFile) == 0)
			{
				globals::process_pid = processentry.th32ProcessID;
				return true;
			}
		}
		return false;
	}
}